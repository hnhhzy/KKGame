using KKServer.Common;
using KKServer.Packet;
using socket.core.Server;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace KKServer.Server
{
    class PullServer
    {
        TcpPullServer server;
        /// <summary>
        /// 设置基本配置
        /// </summary>   
        /// <param name="numConnections">同时处理的最大连接数</param>
        /// <param name="receiveBufferSize">用于每个套接字I/O操作的缓冲区大小(接收端)</param>
        /// <param name="overtime">超时时长,单位秒.(每10秒检查一次)，当值为0时，不设置超时</param>
        ///<param name = "port" > 端口 </ param >
        public PullServer(int numConnections, int receiveBufferSize, int overtime, int port)
        {
            server = new TcpPullServer(numConnections, receiveBufferSize, overtime);
            server.OnAccept += Server_OnAccept;
            server.OnReceive += Server_OnReceive;
            server.OnSend += Server_OnSend;
            server.OnClose += Server_OnClose;
            server.Start(port);
        }

        private void Server_OnAccept(Guid obj)
        {
            //KKNetEngine.KKNet KKNet = new KKNetEngine.KKNet();
            //server.SetAttached(obj, KKNet);
            //Console.WriteLine($"Pull已连接{obj}");
            byte[] test = { 0x00, 0x01, 0x00, 0x01, 0x70, 0x06, 0x00, 0x00, 0x00, 0x01, 0x01 };
            server.InitKKNet(obj);
            server.Encode(obj,test, test.Length);
            server.Send(obj, test, 0, test.Length);

            CMD_MESSAGE_BOX cmd = new CMD_MESSAGE_BOX();
            byte[] cmd_data = cmd.SetText("0\n欢迎进入KK开发服\nhttps://github.com/hnhhzy/KKGame\n", 0x19);
            server.Encode(obj, cmd_data, cmd_data.Length);
            server.Send(obj, cmd_data, 0, cmd_data.Length);
        }

        private void Server_OnSend(Guid arg1, int arg2)
        {
            //Console.WriteLine($"Pull已发送:{arg1} 长度:{arg2}");
        }

        private void Server_OnReceive(Guid arg1, int arg2)
        {
            int aaa = server.GetAttached<int>(arg1);
            //Console.WriteLine($"Pull已接收:{arg1} 长度:{arg2}");
            byte[] buffer = server.Fetch(arg1, server.GetLength(arg1));
            if (arg2 > 4)
            {
                server.Decode(arg1, buffer, arg2);
                CMD_DATA cmd_head = new CMD_DATA();
                cmd_head.Key = buffer[0];
                cmd_head.CMDID = System.BitConverter.ToInt16(buffer, 2);
                if (cmd_head.CMDID == 0x100)        // 请求客户端版本号
                {
                    DebugLog.Show("客户端版本号" + buffer[11].ToString() + "." + buffer[13].ToString() + "." + buffer[15].ToString() + "." + buffer[17].ToString().ToString());
                }else if(cmd_head.CMDID == 0x90)    // 请求登陆
                {
                    int textLen = buffer[7];
                    int splitIndex = 0;
                    for(int i = 0;i< arg2 - 8;i++)
                    {
                        if(buffer[8+i] == 0x0)
                        {
                            splitIndex = 8 + i;
                            break;
                        }
                    }
                    string account = Encoding.GetEncoding("gb2312").GetString(buffer, 8, splitIndex - 8);
                    string password = Encoding.GetEncoding("gb2312").GetString(buffer, splitIndex + 1, arg2-splitIndex - 2);
                    DebugLog.Show("玩家登陆 帐号" + account + ",密码:" + password);

                    CMD_SERVER_LIST cmd = new CMD_SERVER_LIST();
                    byte[] cmd_data = cmd.SetServerStatus("KK开发服", "[33m空闲", "[2;37;0m");
                    server.Encode(arg1, cmd_data, cmd_data.Length);
                    server.Send(arg1, cmd_data, 0, cmd_data.Length);

                }
                else if (cmd_head.CMDID == 0x0690)
                {
                    CMD_ACCOUNT_STATUS cmd = new CMD_ACCOUNT_STATUS();
                    // 点数和可创建角色数
                    byte[] cmd_data = cmd.SetAccountStatus(32767, 255);
                    server.Encode(arg1, cmd_data, cmd_data.Length);
                    server.Send(arg1, cmd_data, 0, cmd_data.Length);

                    CMD_ROLE_LIST cmd_role = new CMD_ROLE_LIST();
                    // 点数和可创建角色数
                    byte[] cmd_role_data = cmd_role.SetRoleName("ruby");
                    server.Encode(arg1, cmd_role_data, cmd_role_data.Length);
                    server.Send(arg1, cmd_role_data, 0, cmd_role_data.Length);

                    //byte[] notice1 = { 0x00, 0x01, 0x70, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x2c, 0x00 };
                    //server.Encode(arg1, notice1, notice1.Length);
                    //server.Send(arg1, notice1, 0, notice1.Length);
                }
                else
                {
                    DebugLog.Show("接收 CMDID:" + cmd_head.CMDID.ToString("X4"));
                }
                
                //byte[] notice = { 0x8e, 0x31, 0x00, 0x12, 0x00, 0x00, 0x01, 0x94, 0x19, 0x30, 0x0a, 0xe6, 0x9c, 0x83, 0xe5, 0x93, 0xa1, 0xe5, 0xae, 0x98, 0xe7, 0xb6, 0xb2, 0xe5, 0xb7, 0xb2, 0xe7, 0xb6, 0xad, 0xe4, 0xbf, 0xae, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xef, 0xbc, 0x8c, 0xe8, 0x8b, 0xa5, 0xe6, 0x82, 0xa8, 0xe7, 0x82, 0xba, 0xe5, 0xa4, 0xa7, 0xe9, 0x99, 0xb8, 0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe4, 0xb8, 0x94, 0xe4, 0xbb, 0x8d, 0xe8, 0x88, 0x8a, 0xe7, 0x84, 0xa1, 0xe6, 0xb3, 0x95, 0xe7, 0x99, 0xbb, 0xe5, 0x85, 0xa5, 0xef, 0xbc, 0x8c, 0x0a, 0xe8, 0xab, 0x8b, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe4, 0xb8, 0x8b, 0xe8, 0xbf, 0xb0, 0xe7, 0x9a, 0x84, 0xe6, 0x96, 0xb9, 0xe6, 0xb3, 0x95, 0xe5, 0x88, 0x87, 0xe6, 0x8f, 0x9b, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0xe7, 0x82, 0xba, 0x49, 0x50, 0xe3, 0x80, 0x82, 0x0a, 0x20, 0x0a, 0x31, 0x2e, 0x20, 0xe9, 0x96, 0x8b, 0xe5, 0x95, 0x9f, 0x20, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x20, 0xe7, 0xb3, 0xbb, 0xe7, 0xb5, 0xb1, 0xe7, 0x9a, 0x84, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x20, 0xe8, 0xa8, 0xad, 0xe5, 0xae, 0x9a, 0xe6, 0xaa, 0x94, 0x20, 0x0a, 0x20, 0x20, 0x28, 0xe6, 0xaa, 0x94, 0xe6, 0xa1, 0x88, 0xe7, 0x9b, 0xae, 0xe9, 0x8c, 0x84, 0xe4, 0xbd, 0x8d, 0xe7, 0xbd, 0xae, 0xe7, 0x82, 0xba, 0x20, 0x43, 0x3a, 0x5c, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x33, 0x32, 0x5c, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x5c, 0x65, 0x74, 0x63, 0x29, 0x0a, 0x32, 0x2e, 0x20, 0xe5, 0x9c, 0xa8, 0xe6, 0xaa, 0x94, 0xe6, 0xa1, 0x88, 0xe6, 0x9c, 0x80, 0xe5, 0xbe, 0x8c, 0xe5, 0x8a, 0xa0, 0xe4, 0xb8, 0x8a, 0xe4, 0xbb, 0xa5, 0xe4, 0xb8, 0x8b, 0xe8, 0xa8, 0xad, 0xe5, 0xae, 0x9a, 0x0a, 0x20, 0x20, 0x20, 0x31, 0x31, 0x32, 0x2e, 0x31, 0x32, 0x31, 0x2e, 0x31, 0x30, 0x39, 0x2e, 0x32, 0x30, 0x38, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x6c, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x77, 0x0a, 0x33, 0x2e, 0x20, 0xe9, 0x87, 0x8d, 0xe6, 0x96, 0xb0, 0xe9, 0x96, 0x8b, 0xe6, 0xa9, 0x9f, 0xe6, 0x88, 0x96, 0xe9, 0x96, 0x8b, 0xe5, 0x95, 0x9f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0xe5, 0x91, 0xbd, 0xe4, 0xbb, 0xa4, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x2c, 0x20, 0xe6, 0xb8, 0x85, 0xe9, 0x99, 0xa4, 0xe6, 0x82, 0xa8, 0xe7, 0x9a, 0x84, 0x44, 0x4e, 0x53, 0xe7, 0xb7, 0xa9, 0xe5, 0xad, 0x98, 0x0a, 0x20, 0x20, 0x20, 0x43, 0x3a, 0x5c, 0x3e, 0x69, 0x70, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x2f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x64, 0x6e, 0x73, 0x0a, 0x00 };
                //server.Encode(arg1, notice, notice.Length);
                //server.Send(arg1, notice, 0, notice.Length);

            }
            //server.Send(arg1, data, 0, data.Length);
        }

        private void Server_OnClose(Guid obj)
        {
            int aaa = server.GetAttached<int>(obj);
            //Console.WriteLine($"Pull断开{obj}");
        }
    }
}
